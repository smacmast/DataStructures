import static org.junit.Assert.*;

import java.util.NoSuchElementException;

import org.junit.Test;

public class MyQueueTest {

	@Test
	public void testPushPopWithIntegers() {
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.push(0); m.push(1);
		assertEquals((Integer) 0, m.pop());
		assertEquals((Integer) 1, m.pop());
		m.push(2); m.push(3);
		m.push(4); m.push(5);
		assertEquals((Integer) 2, m.pop());
		assertEquals((Integer) 3, m.pop());
		assertEquals((Integer) 4, m.pop());
		assertEquals((Integer) 5, m.pop());
	}
	
	@Test
	public void testPushPopWithStrings() {
		MyQueue<String> m = new MyQueue<String>();
		m.push("hello"); m.push("World");
		
		assertEquals("hello", m.pop());
		assertEquals("World", m.pop());
		
		m.push("String2"); m.push("String3");
		m.push("String4"); m.push("String5");
		assertEquals("String5", m.pop());
		assertEquals("String4", m.pop());
		assertEquals("String3", m.pop());
		assertEquals("String2", m.pop());
	}
	
	@Test
	public void testPushPopWithArbitraryObjects() {
		MyQueue<Object> m = new MyQueue<Object>();
		m.push("hello"); m.push(15);
		assertEquals(15, m.pop()); //1 should pop before 0
		assertEquals("hello", m.pop());
		
		Object a = new Object(); Object b = new Object();
		m.push(a); m.push(1.250); 
		m.push(15.01); m.push(b);
		assertEquals(b, m.pop());
		assertEquals(15.01, m.pop());
		assertEquals(1.250, m.pop());
		assertEquals(a, m.pop());
	}

	@Test
	public void testPushPeekPop() {
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.push(0); assertEquals((Integer) 0, m.peek());
		m.push(1); assertEquals((Integer) 1, m.peek());
		
		assertEquals((Integer) 1, m.peek());
		assertEquals((Integer) 1, m.pop());
		
		assertEquals((Integer) 0, m.peek());
		assertEquals((Integer) 0, m.pop());
		
		m.push(2); assertEquals((Integer) 2, m.peek());

		m.push(3); assertEquals((Integer) 3, m.peek());
		m.push(4); assertEquals((Integer) 4, m.peek());
		m.push(5); assertEquals((Integer) 5, m.peek());
		
		assertEquals((Integer) 5, m.peek());
		assertEquals((Integer) 5, m.pop());
		
		assertEquals((Integer) 4, m.peek());
		assertEquals((Integer) 4, m.pop());
		
		assertEquals((Integer) 3, m.peek());
		assertEquals((Integer) 3, m.pop());
		
		assertEquals((Integer) 2, m.peek());
		assertEquals((Integer) 2, m.pop());
	}
	
	@Test
	public void testGetSize() {
		MyQueue<Integer> m = new MyQueue<Integer>();
	    assertEquals(0, m.getSize());
	    m.push(42);
	    assertEquals(1, m.getSize());
	    m.push(-3);
	    assertEquals(2, m.getSize());
	    m.push(17);
	    assertEquals(3, m.getSize());
	    m.push(99);
	    assertEquals(4, m.getSize());
	    assertEquals("second attempt", 4, m.getSize());
	}

	@Test
	public void testClearAndEmpty() {
		MyQueue<Integer> m = new MyQueue<Integer>();
		for(int i =0; i < 5; i++){m.push(i);}
		assertFalse(m.isEmpty());
		m.clear();
		assertTrue(m.isEmpty());
		
		MyQueue<String> m1 = new MyQueue<String>();
		for(int i =0; i < 5; i++){ m1.push("String"+i);}
		assertFalse(m1.isEmpty());
		m1.clear();
		assertTrue(m1.isEmpty());
	}

	@Test (expected = NoSuchElementException.class) 
	public void testPeekException1(){
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.peek();
	}
	
	@Test (expected = NoSuchElementException.class) 
	public void testPeekException2(){
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.push(0); m.pop();
		m.peek(); //should throw exception
	}
	
	@Test (expected = NoSuchElementException.class) 
	public void testPopException(){
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.pop(); //should throw exception
	}
	
	@Test (expected = NoSuchElementException.class) 
	public void testPopException2(){
		MyQueue<Integer> m = new MyQueue<Integer>();
		m.push(0); m.pop();
		m.pop(); //should throw exception
	}
}
