import java.util.Comparator;
import java.util.NoSuchElementException;

/**
 * @author Spencer MacMaster
 * @description Implements a Min-Heap Data Structure.
 */
public class MyMinHeap<T> extends MyHeap<T>{
	
	/**
	 * Constructor of MyMinHeap Class
	 * @param c Comparator for elements
	 */
	public MyMinHeap(Comparator<T> c) { super(c); }
		
	/**
	 *  Removes and returns the minimum element in the heap.
	 *  MinHeap wrapper for extractTop method.
	 *  @return the minimum element in the heap
	 *  @throws NoSuchElementException
	 *  @see {@link #extractTop()}
	 */
	public T extractMin() throws NoSuchElementException {
		return this.extractTop();
	}
	
	/**
	 * Deletes the minimum element in the heap.
	 * MinHeap wrapper for deleteTop.
	 * @throws NoSuchElementException
	 * @see {@link #deleteTop()}
	 */
	public void deleteMin() throws NoSuchElementException {
		this.deleteTop();
	}
	
	/**
	 *  Views and returns the minimum element in the heap.
	 *  MinHeap wrapper for viewTop method.
	 *  @return the minimum element in the heap
	 *  @throws NoSuchElementException
	 *  @see {@link #viewTop()}
	 */
	public T viewMin() throws NoSuchElementException {
		return this.viewTop();
	}

	@Override
	protected void shiftUp(int index) throws IndexOutOfBoundsException{
		int piIndex = this.getParent(index);

		while(this.getParent(index)!= -1 && this.comparer.compare(this.heap[piIndex], this.heap[index]) > 0){
			swap(piIndex, index);
			index = piIndex;
			piIndex = this.getParent(index); 
		}
		
	}

	@Override
	protected void shiftDown(int index) throws IndexOutOfBoundsException{
		int childIndex, childIndexLeft,childIndexRight;
		
		childIndexLeft = this.getLeft(index); childIndexRight = this.getRight(index);
		if (this.comparer.compare(this.heap[childIndexLeft], this.heap[childIndexRight]) >= 0){ childIndex = childIndexLeft; }//left < right
		else{ childIndex = childIndexRight; }
		
		while(this.getRight(index) < this.size && this.comparer.compare(this.heap[childIndex], this.heap[index]) <= 0){
			swap(index, childIndex);
			index = childIndex;
			childIndexLeft = this.getLeft(index); childIndexRight = this.getRight(index);
			if (this.comparer.compare(this.heap[0], this.heap[0]) >= 0){ childIndex = childIndexRight; }//left < right
			else{ childIndex = childIndexLeft; }
		}
	}

	@Override
	public void updateKey(int index, T data) throws IndexOutOfBoundsException{
		if(index < 0 || index > this.size){ throw new IndexOutOfBoundsException();}
		
		if(this.comparer.compare(this.heap[this.getParent(index)], this.heap[index]) > 0){ //parent greater than child
			this.shiftUp(index);	
		}else{
			this.shiftDown(index);
		}
	}

}
